name: "Reusable: Analyze Changes"

on:
  workflow_call:
    inputs:
      compare-commit:
        description: "Commit to compare against (default: latest tag)"
        required: false
        type: string
        default: ""
      output-format:
        description: "Output format: changelog, list, or html"
        required: false
        type: string
        default: "changelog"
      # Allow passing through any additional inputs for future extensibility
      additional-inputs:
        description: "Additional inputs to pass through (JSON string)"
        required: false
        type: string
        default: "{}"

jobs:
  analyze-changes:
    name: "Analyze Changes"
    runs-on: ubuntu-latest
    outputs:
      analysis-summary:
        description: "Summary of analyzed changes"
        value: ${{ steps.set-summary.outputs.summary }}
      changes-detected:
        description: "Whether any changes were detected"
        value: ${{ steps.analyze-changes.outputs.changes-detected }}
      filters-added:
        description: "List of added filters"
        value: ${{ steps.analyze-changes.outputs.filters-added }}
      has-filters-added:
        description: "Whether filters were added"
        value: ${{ steps.analyze-changes.outputs.has-filters-added }}
      filters-removed:
        description: "List of removed filters"
        value: ${{ steps.analyze-changes.outputs.filters-removed }}
      has-filters-removed:
        description: "Whether filters were removed"
        value: ${{ steps.analyze-changes.outputs.has-filters-removed }}
      actions-added:
        description: "List of added actions"
        value: ${{ steps.analyze-changes.outputs.actions-added }}
      has-actions-added:
        description: "Whether actions were added"
        value: ${{ steps.analyze-changes.outputs.has-actions-added }}
      actions-removed:
        description: "List of removed actions"
        value: ${{ steps.analyze-changes.outputs.actions-removed }}
      has-actions-removed:
        description: "Whether actions were removed"
        value: ${{ steps.analyze-changes.outputs.has-actions-removed }}
      views-changed:
        description: "List of changed views"
        value: ${{ steps.analyze-changes.outputs.views-changed }}
      has-views-changed:
        description: "Whether views were changed"
        value: ${{ steps.analyze-changes.outputs.has-views-changed }}
    steps:
      - name: Setup environment
        uses: ./.github/workflows/reusable/basic-setup.yml
        with:
          setup-php: false
          setup-node: false
          fetch-depth: 0

      - name: Analyze changes
        id: analyze-changes
        run: |
          # Determine compare commit
          COMPARE_COMMIT="${{ inputs.compare-commit }}"
          if [ -z "$COMPARE_COMMIT" ]; then
            COMPARE_COMMIT=$(git describe --tags $(git rev-list --tags --max-count=1))
          fi

          echo "Comparing against: $COMPARE_COMMIT"

          # Get the diff
          DIFF=$(git diff -U0 "$COMPARE_COMMIT" -- src/ 2>/dev/null || git diff -U0 "$COMPARE_COMMIT" -- . 2>/dev/null)

          if [ -z "$DIFF" ]; then
            echo "No changes detected"
            echo "changes-detected=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Initialize results
          FILTERS_ADDED=()
          FILTERS_REMOVED=()
          ACTIONS_ADDED=()
          ACTIONS_REMOVED=()
          VIEWS_CHANGED=()

          # Analyze filters
          while IFS= read -r line; do
            if [[ $line =~ ^\+.*apply_filters\([[:space:]]*[\'\"]([^\'\"]+)[\'\"] ]]; then
              FILTERS_ADDED+=("${BASH_REMATCH[1]}")
            elif [[ $line =~ ^\-.*apply_filters\([[:space:]]*[\'\"]([^\'\"]+)[\'\"] ]]; then
              FILTERS_REMOVED+=("${BASH_REMATCH[1]}")
            fi
          done <<< "$DIFF"

          # Analyze actions
          while IFS= read -r line; do
            if [[ $line =~ ^\+.*do_action\([[:space:]]*[\'\"]([^\'\"]+)[\'\"] ]]; then
              ACTIONS_ADDED+=("${BASH_REMATCH[1]}")
            elif [[ $line =~ ^\-.*do_action\([[:space:]]*[\'\"]([^\'\"]+)[\'\"] ]]; then
              ACTIONS_REMOVED+=("${BASH_REMATCH[1]}")
            fi
          done <<< "$DIFF"

          # Analyze views
          while IFS= read -r line; do
            if [[ $line =~ diff\ --git\ a/src/views/([^\.]*)\.php ]]; then
              VIEWS_CHANGED+=("${BASH_REMATCH[1]}")
            fi
          done <<< "$DIFF"

          # Remove duplicates
          FILTERS_ADDED=($(printf "%s\n" "${FILTERS_ADDED[@]}" | sort -u))
          FILTERS_REMOVED=($(printf "%s\n" "${FILTERS_REMOVED[@]}" | sort -u))
          ACTIONS_ADDED=($(printf "%s\n" "${ACTIONS_ADDED[@]}" | sort -u))
          ACTIONS_REMOVED=($(printf "%s\n" "${ACTIONS_REMOVED[@]}" | sort -u))
          VIEWS_CHANGED=($(printf "%s\n" "${VIEWS_CHANGED[@]}" | sort -u))

          # Check if any changes were detected and store results
          TOTAL_CHANGES=$((${#FILTERS_ADDED[@]} + ${#FILTERS_REMOVED[@]} + ${#ACTIONS_ADDED[@]} + ${#ACTIONS_REMOVED[@]} + ${#VIEWS_CHANGED[@]}))

          if [ $TOTAL_CHANGES -eq 0 ]; then
            echo "changes-detected=false" >> $GITHUB_OUTPUT
          else
            echo "changes-detected=true" >> $GITHUB_OUTPUT

            # Store arrays as outputs for reuse
            if [ ${#FILTERS_ADDED[@]} -gt 0 ]; then
              FILTERS_ADDED_STR=$(IFS='`, `'; echo "${FILTERS_ADDED[*]}")
              echo "filters-added=$FILTERS_ADDED_STR" >> $GITHUB_OUTPUT
              echo "has-filters-added=true" >> $GITHUB_OUTPUT
            else
              echo "has-filters-added=false" >> $GITHUB_OUTPUT
            fi

            if [ ${#FILTERS_REMOVED[@]} -gt 0 ]; then
              FILTERS_REMOVED_STR=$(IFS='`, `'; echo "${FILTERS_REMOVED[*]}")
              echo "filters-removed=$FILTERS_REMOVED_STR" >> $GITHUB_OUTPUT
              echo "has-filters-removed=true" >> $GITHUB_OUTPUT
            else
              echo "has-filters-removed=false" >> $GITHUB_OUTPUT
            fi

            if [ ${#ACTIONS_ADDED[@]} -gt 0 ]; then
              ACTIONS_ADDED_STR=$(IFS='`, `'; echo "${ACTIONS_ADDED[*]}")
              echo "actions-added=$ACTIONS_ADDED_STR" >> $GITHUB_OUTPUT
              echo "has-actions-added=true" >> $GITHUB_OUTPUT
            else
              echo "has-actions-added=false" >> $GITHUB_OUTPUT
            fi

            if [ ${#ACTIONS_REMOVED[@]} -gt 0 ]; then
              ACTIONS_REMOVED_STR=$(IFS='`, `'; echo "${ACTIONS_REMOVED[*]}")
              echo "actions-removed=$ACTIONS_REMOVED_STR" >> $GITHUB_OUTPUT
              echo "has-actions-removed=true" >> $GITHUB_OUTPUT
            else
              echo "has-actions-removed=false" >> $GITHUB_OUTPUT
            fi

            if [ ${#VIEWS_CHANGED[@]} -gt 0 ]; then
              VIEWS_CHANGED_STR=$(IFS='`, `'; echo "${VIEWS_CHANGED[*]}")
              echo "views-changed=$VIEWS_CHANGED_STR" >> $GITHUB_OUTPUT
              echo "has-views-changed=true" >> $GITHUB_OUTPUT
            else
              echo "has-views-changed=false" >> $GITHUB_OUTPUT
            fi
          fi

            - name: Create changelog entry for added filters
        id: create-changelog-filters-added
        if: steps.analyze-changes.outputs.has-filters-added == 'true' && inputs.output-format == 'changelog'
        uses: the-events-calendar/actions/.github/actions/add-changelog@main
        with:
          file: "task-analyze-changes-filters-added-${{ github.sha }}"
          significance: patch
          type: tweak
          entry: "Added filters: `${{ steps.analyze-changes.outputs.filters-added }}`"

      - name: Create changelog entry for removed filters
        id: create-changelog-filters-removed
        if: steps.analyze-changes.outputs.has-filters-removed == 'true' && inputs.output-format == 'changelog'
        uses: the-events-calendar/actions/.github/actions/add-changelog@main
        with:
          file: "task-analyze-changes-filters-removed-${{ github.sha }}"
          significance: patch
          type: tweak
          entry: "Removed filters: `${{ steps.analyze-changes.outputs.filters-removed }}`"

      - name: Create changelog entry for added actions
        id: create-changelog-actions-added
        if: steps.analyze-changes.outputs.has-actions-added == 'true' && inputs.output-format == 'changelog'
        uses: the-events-calendar/actions/.github/actions/add-changelog@main
        with:
          file: "task-analyze-changes-actions-added-${{ github.sha }}"
          significance: patch
          type: tweak
          entry: "Added actions: `${{ steps.analyze-changes.outputs.actions-added }}`"

      - name: Create changelog entry for removed actions
        id: create-changelog-actions-removed
        if: steps.analyze-changes.outputs.has-actions-removed == 'true' && inputs.output-format == 'changelog'
        uses: the-events-calendar/actions/.github/actions/add-changelog@main
        with:
          file: "task-analyze-changes-actions-removed-${{ github.sha }}"
          significance: patch
          type: tweak
          entry: "Removed actions: `${{ steps.analyze-changes.outputs.actions-removed }}`"

      - name: Create changelog entry for changed views
        id: create-changelog-views-changed
        if: steps.analyze-changes.outputs.has-views-changed == 'true' && inputs.output-format == 'changelog'
        uses: the-events-calendar/actions/.github/actions/add-changelog@main
        with:
          file: "task-analyze-changes-views-changed-${{ github.sha }}"
          significance: patch
          type: tweak
          entry: "Changed views: `${{ steps.analyze-changes.outputs.views-changed }}`"

      - name: Set output for analysis summary
        id: set-summary
        run: |
          if [ "${{ steps.analyze-changes.outputs.changes-detected }}" == "true" ]; then
            # Generate summary based on output format
            OUTPUT_FORMAT="${{ inputs.output-format }}"
            SUMMARY=""

            if [ "$OUTPUT_FORMAT" = "changelog" ]; then
              # Changelog format (same as what goes into changelog files)
              if [ ${#FILTERS_ADDED[@]} -gt 0 ]; then
                SUMMARY+="* Tweak - Added filters: \`$(IFS='`, `'; echo "${FILTERS_ADDED[*]}")\`\n"
              fi
              if [ ${#FILTERS_REMOVED[@]} -gt 0 ]; then
                SUMMARY+="* Tweak - Removed filters: \`$(IFS='`, `'; echo "${FILTERS_REMOVED[*]}")\`\n"
              fi
              if [ ${#ACTIONS_ADDED[@]} -gt 0 ]; then
                SUMMARY+="* Tweak - Added actions: \`$(IFS='`, `'; echo "${ACTIONS_ADDED[*]}")\`\n"
              fi
              if [ ${#ACTIONS_REMOVED[@]} -gt 0 ]; then
                SUMMARY+="* Tweak - Removed actions: \`$(IFS='`, `'; echo "${ACTIONS_REMOVED[*]}")\`\n"
              fi
              if [ ${#VIEWS_CHANGED[@]} -gt 0 ]; then
                SUMMARY+="* Tweak - Changed views: \`$(IFS='`, `'; echo "${VIEWS_CHANGED[*]}")\`\n"
              fi
            elif [ "$OUTPUT_FORMAT" = "list" ]; then
              # List format
              if [ ${#FILTERS_ADDED[@]} -gt 0 ]; then
                SUMMARY+="Added filters:\n"
                for filter in "${FILTERS_ADDED[@]}"; do
                  SUMMARY+="- $filter\n"
                done
              fi
              if [ ${#FILTERS_REMOVED[@]} -gt 0 ]; then
                SUMMARY+="Removed filters:\n"
                for filter in "${FILTERS_REMOVED[@]}"; do
                  SUMMARY+="- $filter\n"
                done
              fi
              if [ ${#ACTIONS_ADDED[@]} -gt 0 ]; then
                SUMMARY+="Added actions:\n"
                for action in "${ACTIONS_ADDED[@]}"; do
                  SUMMARY+="- $action\n"
                done
              fi
              if [ ${#ACTIONS_REMOVED[@]} -gt 0 ]; then
                SUMMARY+="Removed actions:\n"
                for action in "${ACTIONS_REMOVED[@]}"; do
                  SUMMARY+="- $action\n"
                done
              fi
              if [ ${#VIEWS_CHANGED[@]} -gt 0 ]; then
                SUMMARY+="Changed views:\n"
                for view in "${VIEWS_CHANGED[@]}"; do
                  SUMMARY+="- $view\n"
                done
              fi
            else
              # HTML format
              if [ ${#FILTERS_ADDED[@]} -gt 0 ]; then
                SUMMARY+="<h4>Filters added</h4>\n<ul>\n"
                for filter in "${FILTERS_ADDED[@]}"; do
                  SUMMARY+="\t<li><samp>$filter</samp></li>\n"
                done
                SUMMARY+="</ul>\n"
              fi
              if [ ${#FILTERS_REMOVED[@]} -gt 0 ]; then
                SUMMARY+="<h4>Filters removed</h4>\n<ul>\n"
                for filter in "${FILTERS_REMOVED[@]}"; do
                  SUMMARY+="\t<li><samp>$filter</samp></li>\n"
                done
                SUMMARY+="</ul>\n"
              fi
              if [ ${#ACTIONS_ADDED[@]} -gt 0 ]; then
                SUMMARY+="<h4>Actions added</h4>\n<ul>\n"
                for action in "${ACTIONS_ADDED[@]}"; do
                  SUMMARY+="\t<li><samp>$action</samp></li>\n"
                done
                SUMMARY+="</ul>\n"
              fi
              if [ ${#ACTIONS_REMOVED[@]} -gt 0 ]; then
                SUMMARY+="<h4>Actions removed</h4>\n<ul>\n"
                for action in "${ACTIONS_REMOVED[@]}"; do
                  SUMMARY+="\t<li><samp>$action</samp></li>\n"
                done
                SUMMARY+="</ul>\n"
              fi
              if [ ${#VIEWS_CHANGED[@]} -gt 0 ]; then
                SUMMARY+="<h4>Views</h4>\n<ul>\n"
                for view in "${VIEWS_CHANGED[@]}"; do
                  SUMMARY+="\t<li><samp>$view</samp></li>\n"
                done
                SUMMARY+="</ul>\n"
              fi
            fi

            # Escape for GitHub Actions output
            SUMMARY_ESCAPED=$(echo -e "$SUMMARY" | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g')
            echo "summary=$SUMMARY_ESCAPED" >> $GITHUB_OUTPUT
          else
            echo "summary=No changes detected" >> $GITHUB_OUTPUT
          fi

          # Display in step summary
          echo "## Change Analysis" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.analyze-changes.outputs.changes-detected }}" == "true" ]; then
            echo -e "$SUMMARY" >> $GITHUB_STEP_SUMMARY
            if [ "${{ inputs.output-format }}" == "changelog" ] && [ "${{ steps.analyze-changes.outputs.changes-detected }}" == "true" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Individual changelog entries created for each change type using add-changelog action**" >> $GITHUB_STEP_SUMMARY

              # List which entries were created
              CREATED_ENTRIES=()
              if [ "${{ steps.analyze-changes.outputs.has-filters-added }}" == "true" ]; then
                CREATED_ENTRIES+=("- Added filters")
              fi
              if [ "${{ steps.analyze-changes.outputs.has-filters-removed }}" == "true" ]; then
                CREATED_ENTRIES+=("- Removed filters")
              fi
              if [ "${{ steps.analyze-changes.outputs.has-actions-added }}" == "true" ]; then
                CREATED_ENTRIES+=("- Added actions")
              fi
              if [ "${{ steps.analyze-changes.outputs.has-actions-removed }}" == "true" ]; then
                CREATED_ENTRIES+=("- Removed actions")
              fi
              if [ "${{ steps.analyze-changes.outputs.has-views-changed }}" == "true" ]; then
                CREATED_ENTRIES+=("- Changed views")
              fi

              if [ ${#CREATED_ENTRIES[@]} -gt 0 ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "**Created changelog entries for:**" >> $GITHUB_STEP_SUMMARY
                for entry in "${CREATED_ENTRIES[@]}"; do
                  echo "$entry" >> $GITHUB_STEP_SUMMARY
                done
              fi
            fi
          else
            echo "No changes detected" >> $GITHUB_STEP_SUMMARY
          fi
