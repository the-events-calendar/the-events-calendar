name: Skip Flags Parser

# Parses PR descriptions for skip flags and posts a summary comment
# This workflow helps developers and reviewers quickly see which workflows will be skipped
on:
  pull_request:
    types: [opened, synchronize, edited]

jobs:
  parse-skip-flags:
    name: Parse and Report Skip Flags
    runs-on: ubuntu-latest
    steps:
      - name: Setup environment
        uses: the-events-calendar/actions/.github/actions/base-setup@main
        with:
          setup-php: 'false'
          setup-node: 'false'

      - name: Parse skip flags from PR description
        id: parse-flags
        shell: bash
        run: |
          # Get the PR body and ensure it's not empty
          PR_BODY="${{ github.event.pull_request.body }}"

          if [ -z "$PR_BODY" ]; then
            echo "PR body is empty, no skip flags to process."
            echo "skipped_workflows=" >> $GITHUB_OUTPUT
            echo "has_skips=false" >> $GITHUB_OUTPUT
            echo "message=No workflows were skipped." >> $GITHUB_OUTPUT
            exit 0
          fi

          # Use regex to find all skip flags in the format [skip-*]
          # This will catch any flag that starts with [skip- and ends with ]
          skip_flags=$(echo "$PR_BODY" | grep -ioE '\[skip-[^]]+\]' | sort -u || true)

          if [ -z "$skip_flags" ]; then
            echo "skipped_workflows=" >> $GITHUB_OUTPUT
            echo "has_skips=false" >> $GITHUB_OUTPUT
            echo "message=No workflows were skipped." >> $GITHUB_OUTPUT
            echo "## Skip Flags Analysis" >> $GITHUB_STEP_SUMMARY
            echo "✅ No skip flags found in PR description." >> $GITHUB_STEP_SUMMARY
          else
            # Convert to arrays for processing
            readarray -t found_flags <<< "$skip_flags"
            found_descriptions=()

            # Generate human-readable descriptions from flag names
            for flag in "${found_flags[@]}"; do
              # Extract the part after "skip-" and before "]"
              flag_name=$(echo "$flag" | sed 's/\[skip-\(.*\)\]/\1/' | tr '[:upper:]' '[:lower:]')

              # Create human-readable description
              case "$flag_name" in
                "phpcs")
                  description="PHP CodeSniffer"
                  ;;
                "phpstan")
                  description="PHPStan Static Analysis"
                  ;;
                "lint")
                  description="Linting"
                  ;;
                "tests")
                  description="All Tests"
                  ;;
                "changelog")
                  description="Changelog Validation"
                  ;;
                *)
                  # Generic description: convert dashes to spaces and capitalize words
                  description=$(echo "$flag_name" | tr '-' ' ' | sed 's/\b\w/\U&/g')
                  ;;
              esac
              found_descriptions+=("$description")
            done

            # Convert array to JSON format for output
            flags_json=$(printf '%s\n' "${found_flags[@]}" | jq -R . | jq -s .)
            echo "skipped_workflows=$flags_json" >> $GITHUB_OUTPUT
            echo "has_skips=true" >> $GITHUB_OUTPUT

            # Create summary for step output
            echo "## Skip Flags Analysis" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Found ${#found_flags[@]} skip flag(s):" >> $GITHUB_STEP_SUMMARY
            for i in "${!found_flags[@]}"; do
              echo "- \`${found_flags[$i]}\` → ${found_descriptions[$i]}" >> $GITHUB_STEP_SUMMARY
            done

            # Create formatted message for PR comment
            message="## ⚠️ Skipped Workflows"
            message+=$'\n\nThe following workflows will be skipped based on flags in your PR description:'
            message+=$'\n'
            for desc in "${found_descriptions[@]}"; do
              message+=$'\n- ✋ **'$desc'**'
            done
            message+=$'\n\n---'
            message+=$'\n*This comment was automatically generated by the Skip Flags Parser workflow.*'

            # Use proper multiline output format
            {
              echo "message<<EOF"
              echo "$message"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR with skip summary
        if: steps.parse-flags.outputs.has_skips == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Check if a skip flags comment already exists
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment =>
              comment.body.includes('⚠️ Skipped Workflows') &&
              comment.user.type === 'Bot'
            );

            const body = `${{ steps.parse-flags.outputs.message }}`;

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
              console.log('Updated existing skip flags comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
              console.log('Created new skip flags comment');
            }
